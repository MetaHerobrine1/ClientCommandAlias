name: Gradle CI

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['16']

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle Wrapper
      uses: actions/cache@v1
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    - name: Cache Gradle
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload mod jar
      uses: actions/upload-artifact@v2
      with:
        name: mod-jar
        path: |
          build/libs/*.jar
          !build/libs/*-sources.jar
          !build/libs/*-dev.jar
          !build/libs/*-fabric-*.jar

  release-on-github:
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download mod jar
        uses: actions/download-artifact@v2
        with:
          name: mod-jar

      - name: Set PREREL environment variable
        env:
          TAG: ${{ github.ref }}
        run: echo "PREREL=$(if [[ $TAG =~ "alpha" ]] || [[ $TAG =~ "beta" ]] || [[ $TAG =~ "rc" ]]; then echo "true"; else echo "false"; fi;)" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: ${{ env.PREREL }}

      - name: Create sanitized github.ref
        run: echo "TAG_USED=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV

      - name: Upload Mod Jar to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.jar
          asset_name: client-cmd-alias-${{ env.TAG_USED }}.jar
          asset_content_type: application/octet-stream
